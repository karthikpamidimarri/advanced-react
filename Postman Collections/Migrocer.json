{
  "info": {
    "name": "Migrocer",
    "_postman_id": "29f61370-c4b5-c1fc-53c1-ad5643310544",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "58138b95-7df2-9893-cb25-022e02884e93",
      "name": "postmanBDD",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// \"install\" Postman BDD",
              "postman.setGlobalVariable('postmanBDD', responseBody);",
              "var timeUser = Date.now();",
              "console.log(timeUser)",
              "postman.setEnvironmentVariable('new_email', 'user'+timeUser+'@gmail.com');"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "body": {},
        "url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js",
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "0c80ab82-1326-b9a0-a4f0-4f88afb7c9a3",
      "name": "save_user_location",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "",
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "tests[\"Status code is 200\"] = responseCode.code === 200;",
              "",
              "describe('Get customer info', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "  it('should return the correct customer', () => {",
              "    responseBody.has(\"data id\");",
              "  });",
              "",
              "  var jsonData = pm.response.json();",
              "",
              "  /*it('lat,lon & area should not null', () => {",
              "     pm.expect(jsonData.data.user_location.lat).to.not.eq(null);",
              "     pm.expect(jsonData.data.user_location.lon).to.not.eq(null);",
              "     pm.expect(jsonData.data.user_location.area).to.not.eq(null);",
              "  });",
              "  */",
              "",
              "});",
              "",
              "",
              " it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "pm.test(\"Content-Type is present\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "email",
              "value": "{{email}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password",
              "value": "{{password}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password_confirmation",
              "value": "shree123",
              "description": "",
              "type": "text",
              "disabled": true
            }
          ]
        },
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation{saveUserLocation(input:{lat: {{lat}},lon: {{lon}},area:\"dilshuknagar\"}){user_location}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation{saveUserLocation(input:{lat: {{lat}},lon: {{lon}},area:\"dilshuknagar\"}){user_location}}",
              "equals": true
            },
            {
              "key": "",
              "value": "",
              "equals": false,
              "disabled": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "7c806486-a87d-2014-af39-3f70deea1e0e",
      "name": "sign-up  - with new email address",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "tests[\"Status code is 200\"] = responseCode.code === 200;",
              "",
              "",
              "",
              "tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 201 ;",
              "",
              "var jsonData = pm.response.json();",
              "",
              "postman.setEnvironmentVariable('email', jsonData.data.email);",
              "",
              "",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "",
              "",
              "",
              "pm.test(\"Content-Type is present\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "email",
              "value": "{{new_email}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password",
              "value": "{{password}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password_confirmation",
              "value": "{{password}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "first_name",
              "value": "{{first_name}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "last_name",
              "value": "{{last_name}}",
              "description": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/auth?config_name=default",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "auth"
          ],
          "query": [
            {
              "key": "config_name",
              "value": "default",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "a4a5bf8d-2fc1-e573-f3cd-f0612faee683",
      "name": "sign-up - error with existing email",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "tests[\"Status code is 422\"] = responseCode.code === 422;",
              "",
              "",
              "  var jsonData = pm.response.json();",
              "  it('should have error object', () => {",
              "    pm.expect(jsonData).own.property('errors');",
              "  });",
              "  ",
              "postman.setEnvironmentVariable('email', jsonData.data.email);",
              "",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "email",
              "value": "{{new_email}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password",
              "value": "{{password}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password_confirmation",
              "value": "{{password}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "",
              "value": "",
              "description": "",
              "type": "text",
              "disabled": true
            }
          ]
        },
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/auth?config_name=default",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "auth"
          ],
          "query": [
            {
              "key": "config_name",
              "value": "default",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "eee64d79-b957-c51f-f511-7e4e429580d6",
      "name": "sign_in",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "",
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "tests[\"Status code is 200\"] = responseCode.code === 200;",
              "",
              "",
              "",
              "tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 201 ;",
              "",
              "postman.setEnvironmentVariable('access-token', postman.getResponseHeader(\"access-token\"));",
              "postman.setEnvironmentVariable('client', postman.getResponseHeader(\"client\"));",
              "postman.setEnvironmentVariable('uid', postman.getResponseHeader(\"uid\"));",
              "",
              "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
              " ",
              "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
              " ",
              "if (contentTypeHeaderExists) {",
              "    tests[\"Content-Type is application/json\"] = ",
              "      responseHeaders[\"Content-Type\"].has(\"application/json\");",
              "}",
              " ",
              "describe('Get customer info', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should set the access-token  header', () => {",
              "    response.should.have.header('access-token');",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "  it('should return the correct customer', () => {",
              "    responseBody.has(\"data id\");",
              "  });",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "});",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "email",
              "value": "{{new_email}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password",
              "value": "{{password}}",
              "description": "",
              "type": "text"
            },
            {
              "key": "password_confirmation",
              "value": "shree123",
              "description": "",
              "type": "text",
              "disabled": true
            }
          ]
        },
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/auth/sign_in",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "auth",
            "sign_in"
          ],
          "query": [
            {
              "key": "",
              "value": "",
              "equals": false,
              "disabled": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "141f3a79-db87-3064-d4fd-9349dbfd45b1",
      "name": "edit_account",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "  eval(globals.postmanBDD);",
              " ",
              " var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation {editAccount(input:{first_name:{{first_name}}, last_name: {{last_name}}, phone: {{phone}}}) {user {email first_name last_name phone}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation {editAccount(input:{first_name:{{first_name}}, last_name: {{last_name}}, phone: {{phone}}}) {user {email first_name last_name phone}}}",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "6dccd98c-e1a9-27e7-3ab3-157bd9c3f078",
      "name": "storesDeliveringTo",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Stores info', () => {",
              "",
              " it('should return a 200 response', () => {",
              "   response.should.have.status(200);",
              " });",
              "",
              " it('should return a JSON response', () => {",
              "   response.should.be.json;",
              " });",
              "var jsonData = pm.response.json();",
              "",
              "postman.setEnvironmentVariable('storeId', jsonData.data.storesDeliveringTo[0].id);",
              "",
              "",
              "});",
              "",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "",
              "",
              "",
              "",
              "pm.test(\"Status code name has string\", function () {",
              "    pm.response.to.have.status(\"OK\");",
              "});",
              "",
              "",
              "",
              "pm.test(\"Content-Type is present\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{storesDeliveringTo(lat:{{lat}}, lon: {{lon}})  {  id name  profilePicture slug}  }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{storesDeliveringTo(lat:{{lat}}, lon: {{lon}})  {  id name  profilePicture slug}  }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "0a28d0f2-4f49-2453-1614-90bcc802afc3",
      "name": "update_user_last_visited_store",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Update last visited store id', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "  ",
              " var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation{   updateUserLastVisitedStore(input:{id:{{storeId}}}){     status   } }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation{   updateUserLastVisitedStore(input:{id:{{storeId}}}){     status   } }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "290a2bd7-66aa-1592-94f7-22a0281a2849",
      "name": "storeInfo",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected Store info', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "  ",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "  it('should return the selected store', () => {",
              "    pm.expect(jsonData.data.storeInfo.id).to.eql(pm.environment.get(\"storeId\"));",
              "  });",
              "",
              "});",
              "",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "query",
              "value": "query{storeInfo(id:{{storeId}})  {  id active email name  profile_picture profile_picture_file_name} }",
              "description": "",
              "type": "text",
              "disabled": true
            }
          ]
        },
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{storeInfo(id:{{storeId}})  {  id active email name  profile_picture profile_picture_file_name} }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{storeInfo(id:{{storeId}})  {  id active email name  profile_picture profile_picture_file_name} }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "64bb156c-d20e-2010-322c-7575e7f8bb08",
      "name": "supplier_products",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected Store Products', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "     var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "      ",
              "  it('should return the selected store products', () => {",
              "    pm.expect(jsonData.data.supplier_products.length).to.above(2);",
              "  });",
              "  ",
              "  ",
              "   it('logs missing property info', () => {",
              "      ",
              "      if(jsonData.data.supplier_products.length >0){",
              "        var supplier_products = jsonData.data.supplier_products;",
              "          for(i=0;i<supplier_products.length;i++){",
              "              if(supplier_products[i].productsConnection.edges.length === 0){",
              "                  console.log(\"Products are not available for this taxonomy\"+supplier_products[i].name);",
              "              }",
              "            var edges = supplier_products[i].productsConnection.edges;",
              "            for(j=0;j<edges.length;j++){",
              "                var variants = edges[j].node.variants;",
              "                for(k=0; k<variants.length; k++){",
              "                    if(variants[k].option_values.length === 0){",
              "                        console.log(\"Is it a master variant---\"+variants[k].is_master);",
              "                        console.log(\"To this variant name ---  \" + edges[j].node.name +\"--- doesn't have option values\");",
              "                    }",
              "                }",
              "            }",
              "          }",
              "      }",
              "    ",
              "  });",
              "  ",
              "  it('should have the presentation value for all the products', () => {",
              "      ",
              "      if(jsonData.data.supplier_products.length >0){",
              "        var supplier_products = jsonData.data.supplier_products;",
              "          for(i=0;i<supplier_products.length;i++){",
              "              if(supplier_products[i].productsConnection.edges.length === 0){",
              "                  console.log(\"Products are not available for this taxonomy\"+supplier_products[i].name);",
              "              }",
              "            var edges = supplier_products[i].productsConnection.edges;",
              "            for(j=0;j<edges.length;j++){",
              "                var variants = edges[j].node.variants;",
              "                for(k=0; k<variants.length; k++){",
              "                    if(variants[k].option_values.length === 0){",
              "                        console.log(\"To this variant name ---  \" + edges[j].node.name +\"--- doesn't have option values\");",
              "                    }",
              "                    pm.expect(variants[k].option_values.length).to.above(0);",
              "                }",
              "            }",
              "          }",
              "      }",
              "  });",
              "  it('should have the image for all the products', () => {",
              "      ",
              "      if(jsonData.data.supplier_products.length >0){",
              "        var supplier_products = jsonData.data.supplier_products;",
              "          for(i=0;i<supplier_products.length;i++){",
              "              if(supplier_products[i].productsConnection.edges.length === 0){",
              "                  console.log(\"Products are not available for this taxonomy\"+supplier_products[i].name);",
              "              }",
              "            var edges = supplier_products[i].productsConnection.edges;",
              "            for(j=0;j<edges.length;j++){",
              "                var variants = edges[j].node.variants;",
              "                for(k=0; k<variants.length; k++){",
              "                    ",
              "                    if(variants[k].images.length === 0){",
              "                        console.log(\"To this variant name ---  \" + edges[j].node.name +\"--- doesn't have images\");",
              "                    }",
              "                    pm.expect(variants[k].images.length).to.above(0);",
              "                }",
              "            }",
              "          }",
              "      }",
              "  });",
              "  function processText(inputText) {",
              "    var output = [];",
              "    var json = inputText.split(' ');",
              "    json.forEach(function (item) {",
              "        output.push(item.replace(/\\'/g, '').split(/(\\d+)/).filter(Boolean));",
              "    });",
              "    return output[0][1];",
              "  }",
              "    ",
              "    it('should return all the UOM should be same', () => {",
              "      ",
              "      if(jsonData.data.supplier_products.length >0){",
              "        var supplier_products = jsonData.data.supplier_products;",
              "          for(i=0;i<supplier_products.length;i++){",
              "              if(supplier_products[i].productsConnection.edges.length === 0){",
              "                  console.log(\"Products are not available for this taxonomy\"+supplier_products[i].name);",
              "              }",
              "            var edges = supplier_products[i].productsConnection.edges;",
              "            for(j=0;j<edges.length;j++){",
              "                var variants = edges[j].node.variants;",
              "                for(k=0; k<variants.length; k++){",
              "                    if(variants[k].option_values.length === 0){",
              "                        console.log(\"To this variant name ---  \" + edges[j].node.name +\"--- doesn't have option values\");",
              "                    }",
              "                    var masterUOM,unMasterUOM;",
              "                    if(variants[k].is_master)",
              "                        masterUOM =  processText(variants[k].option_values[0].presentation);",
              "                    else",
              "                        unMasterUOM =  processText(variants[k].option_values[0].presentation);",
              "                        ",
              "                    if(!variants[k].is_master && masterUOM){",
              "                        ",
              "                        console.log(\"Option values are not matched to this particular variant---- \"+variants[k].name  + \"----\" + masterUOM +\"------\"+unMasterUOM);",
              "                        assert.equal(masterUOM, unMasterUOM);",
              "                    }",
              "                    ",
              "                    ",
              "                    pm.expect(variants[k].option_values.length).to.above(0);",
              "                }",
              "            }",
              "          }",
              "      }",
              "  });",
              "",
              "  postman.setEnvironmentVariable('variantId', jsonData.data.supplier_products[0].productsConnection.edges[0].node.variants[0].id);",
              "  postman.setEnvironmentVariable('productId', jsonData.data.supplier_products[0].productsConnection.edges[0].node.id);",
              "  ",
              "  ",
              "  ",
              "  ",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{supplier_products(supplier_id:{{storeId}}){ id name  productsConnection(supplier_id:{{storeId}},after:\"\",first:200){edges{node{id name price  currency images{id url} variants{id can_supply is_master name images{id url}price option_values{id presentation}}}cursor}pageInfo{startCursor endCursor hasNextPage hasPreviousPage}}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{supplier_products(supplier_id:{{storeId}}){ id name  productsConnection(supplier_id:{{storeId}},after:\"\",first:200){edges{node{id name price  currency images{id url} variants{id can_supply is_master name images{id url}price option_values{id presentation}}}cursor}pageInfo{startCursor endCursor hasNextPage hasPreviousPage}}}}\n",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "d66c3f30-c0a7-d02d-29f3-f48ddb83d102",
      "name": "incrementLineItem",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected Store info', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "   var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation{incrementLineItem(input:{variant_id:{{variantId}}})  {  order{id number item_count item_total}} }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation{incrementLineItem(input:{variant_id:{{variantId}}})  {  order{id number item_count item_total}} }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "06955bb1-1839-cd29-420b-08680f3784e8",
      "name": "cart",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Cart', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  it('line items to be an array', () => {",
              "      pm.expect(jsonData.data.cart.lineItemsOfStores).to.be.an('array');",
              "  });",
              "  ",
              " ",
              "  it('line item quantity should be greater than zero', () =>{",
              "      if(jsonData.data.cart.lineItemsOfStores.length >0){",
              "          for(i=0;i<jsonData.data.cart.lineItemsOfStores.length;i++){",
              "              for(j=0;j<jsonData.data.cart.lineItemsOfStores[i].line_items.length;j++){",
              "                pm.expect(jsonData.data.cart.lineItemsOfStores[i].line_items[j].quantity).to.above(0);   ",
              "              }",
              "          }",
              "      }",
              "  });",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{cart{total deliveryTime lineItemsOfStores{storeName line_items{productName currency  price quantity  image {url}}}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{cart{total deliveryTime lineItemsOfStores{storeName line_items{productName currency  price quantity  image {url}}}}}\n",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "c1280aca-6dcb-3047-eb4e-e49f47549a9e",
      "name": "cart again",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Cart', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  it('line items to be an array', () => {",
              "      pm.expect(jsonData.data.cart.lineItemsOfStores).to.be.an('array');",
              "  });",
              "  ",
              " ",
              "  it('line item quantity should be greater than zero', () =>{",
              "      if(jsonData.data.cart.lineItemsOfStores.length >0){",
              "          for(i=0;i<jsonData.data.cart.lineItemsOfStores.length;i++){",
              "              for(j=0;j<jsonData.data.cart.lineItemsOfStores[i].line_items.length;j++){",
              "                pm.expect(jsonData.data.cart.lineItemsOfStores[i].line_items[j].quantity).to.above(0);   ",
              "              }",
              "          }",
              "      }",
              "  });",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{cart{total deliveryTime lineItemsOfStores{storeName line_items{productName currency  price quantity  image {url}}}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{cart{total deliveryTime lineItemsOfStores{storeName line_items{productName currency  price quantity  image {url}}}}}\n",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "de9d6517-4e4c-9131-3d83-a739369ac51a",
      "name": "decrementLineItem",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "eval(globals.postmanBDD);",
              "",
              "var jsonData = pm.response.json();",
              "  ",
              "it('should not have error object', () => {",
              "  pm.expect(jsonData).not.own.property('errors');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation{decrementLineItem(input:{variant_id:{{variantId}}})  {  order{id number item_count item_total}} }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation{decrementLineItem(input:{variant_id:{{variantId}}})  {  order{id number item_count item_total}} }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "1dd47a87-832b-36ea-52c5-811cfa1c1d4e",
      "name": "FetchTaxonomies",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected Store taxonomies', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              " var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              " /* it('should contains id property', () => {",
              "      assert.include(jsonData.data.taxonomies[0], { id: '2' }, 'object contains property');",
              "  }) ;*/",
              "",
              "  postman.setEnvironmentVariable('taxonomy_id', jsonData.data.taxonomies[0].id);",
              "  postman.setEnvironmentVariable('taxon_id', jsonData.data.taxonomies[0].taxons[0].id);",
              "  /*it('should return the selected store taxonomies', () => {",
              "      pm.expect(jsonData.data.taxonomies.length).to.above(2);",
              "  });*/",
              "  ",
              "",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{taxonomies(supplier_id:{{storeId}})  {  id name icon  taxons(supplier_id: {{storeId}}) {id name} } }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{taxonomies(supplier_id:{{storeId}})  {  id name icon  taxons(supplier_id: {{storeId}}) {id name} } }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "e3b34554-e0d5-1780-2b9c-24943ba58038",
      "name": "edit_account copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "  eval(globals.postmanBDD);",
              " ",
              " var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation {editAccount(input:{first_name:{{first_name}}, last_name: {{last_name}}, phone: {{phone}}}) {user {email first_name last_name phone}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation {editAccount(input:{first_name:{{first_name}}, last_name: {{last_name}}, phone: {{phone}}}) {user {email first_name last_name phone}}}",
              "equals": true
            }
          ]
        },
        "description": null
      },
      "response": []
    },
    {
      "_postman_id": "330aff94-a22b-8a99-2f41-23a1172d9ba4",
      "name": "taxonomyProductsConnection",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected taxonomy Products', () => {",
              "",
              "    it('should return a 200 response', () => {",
              "        response.should.have.status(200);",
              "    });",
              "",
              "    it('should return a JSON response', () => {",
              "        response.should.be.json;",
              "    });",
              "    ",
              "     var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "    ",
              "",
              "  //  it('should return the selected taxonomy products', () => {",
              "    //    assert.isAtLeast(1, jsonData.data.taxonomyProductsConnection.edges.length);",
              "//    });",
              "    postman.setEnvironmentVariable('variantId', jsonData.data.taxonomyProductsConnection.edges[0].node.variants[0].id);",
              "    postman.setEnvironmentVariable('productId', jsonData.data.taxonomyProductsConnection.edges[0].node.id);",
              "",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{taxonomyProductsConnection(supplier_id:{{storeId}},taxonomy_id:{{taxonomy_id}}, after:\"\",first:{{first}}){\n    edges{node{id name price currency images{id url } variants{ id name images{ id url } price  option_values{id}}} cursor}pageInfo{startCursor endCursor    hasNextPage hasPreviousPage }}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{taxonomyProductsConnection(supplier_id:{{storeId}},taxonomy_id:{{taxonomy_id}}, after:\"\",first:{{first}}){\n    edges{node{id name price currency images{id url } variants{ id name images{ id url } price  option_values{id}}} cursor}pageInfo{startCursor endCursor    hasNextPage hasPreviousPage }}}\n\n",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "defec8d7-f325-84ac-10a9-00da9b94af0f",
      "name": "taxonProductsConnection",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected taxon Products', () => {",
              "",
              "    it('should return a 200 response', () => {",
              "        response.should.have.status(200);",
              "    });",
              "",
              "    it('should return a JSON response', () => {",
              "        response.should.be.json;",
              "    });",
              "    ",
              "     var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "",
              "   // it('should return the selected taxon products', () => {",
              "     //   assert.isAtLeast(1, jsonData.data.taxonProductsConnection.edges.length);",
              "    //});",
              "",
              "    postman.setEnvironmentVariable('variantId', jsonData.data.taxonProductsConnection.edges[0].node.variants[0].id);",
              "    postman.setEnvironmentVariable('productId', jsonData.data.taxonProductsConnection.edges[0].node.id);",
              "    ",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{taxonProductsConnection(supplier_id:{{storeId}},taxon_id:{{taxon_id}}, after:\"\",first:{{first}}){edges{node{id name price currency images{ id url } variants{id name images{id url} price option_values{ id }}}cursor}pageInfo{startCursor endCursor hasNextPage hasPreviousPage}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{taxonProductsConnection(supplier_id:{{storeId}},taxon_id:{{taxon_id}}, after:\"\",first:{{first}}){edges{node{id name price currency images{ id url } variants{id name images{id url} price option_values{ id }}}cursor}pageInfo{startCursor endCursor hasNextPage hasPreviousPage}}}\n",
              "equals": true
            }
          ]
        },
        "description": null
      },
      "response": []
    },
    {
      "_postman_id": "9dd660aa-241c-fa35-63c2-b354373876c6",
      "name": "user_details",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "",
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get User info', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  it('should return the user details', () => {",
              "    pm.expect(jsonData.data.user_details.first_name).to.eql('Karthik');",
              "  });",
              "",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{user_details{email first_name id last_name phone latitude longitude area }}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{user_details{email first_name id last_name phone latitude longitude area }}",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "450f23a0-a2bc-8ae5-adfb-f7f0dd152438",
      "name": "List of addresses",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Addresses', () => {",
              "     var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "      ",
              "  it('it should to be an array', () => {",
              "      pm.expect(jsonData.data.addresses).to.be.an('array');",
              "  });",
              "  ",
              "  if('address type should match one of the home,office and other', () => {",
              "         ",
              "     ",
              "  });",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{addresses{id address_type firstname lastname address1   address2 area city country phone }}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{addresses{id address_type firstname lastname address1   address2 area city country phone }}",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "2ef6966b-8bb1-90c6-bb15-235416ba2974",
      "name": "product_and_related_products",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('product details', () => {",
              "",
              "    it('should return a 200 response', () => {",
              "        response.should.have.status(200);",
              "    });",
              "",
              "    it('should return a JSON response', () => {",
              "        response.should.be.json;",
              "    });",
              "    ",
              "  var jsonData = pm.response.json();",
              "  ",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "    ",
              "    /*it('should return the select product and related products info', () => {",
              "        assert.isAtLeast(1, jsonData.data.taxonProductsConnection.edges.length);",
              "    });*/",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{product_and_related_products(id: {{productId}}){id name description price currency  images {id url } relatedProductsConnection(first:{{first}},after:\"\") {edges{ node{id name images {id url }price}cursor }pageInfo{startCursor endCursor hasNextPage hasPreviousPage}}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{product_and_related_products(id: {{productId}}){id name description price currency  images {id url } relatedProductsConnection(first:{{first}},after:\"\") {edges{ node{id name images {id url }price}cursor }pageInfo{startCursor endCursor hasNextPage hasPreviousPage}}}}\n",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "affb6530-f4cb-4b46-4392-bb9ea6ef6f44",
      "name": "add_new_address",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Addresses', () => {",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "  postman.setEnvironmentVariable('address_id', jsonData.data.addNewAddress.newAddressId);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation { addNewAddress(input:{address:   {addressType:OFFICE,firstname:\"KARTHIK\"      lastname:\"Pamidimarri\",     address1:\"asf\",     address2:\"asdf\",     area:\"Kondapur\",     city:\"Hyderabad\",     state:\"Assam\",     country:\"India\",     phone:\"9885280507\",     isDefault:true,     latitude:555.2,     longitude:87.44   }}){     newAddressId   }    }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation { addNewAddress(input:{address:   {addressType:OFFICE,firstname:\"KARTHIK\"      lastname:\"Pamidimarri\",     address1:\"asf\",     address2:\"asdf\",     area:\"Kondapur\",     city:\"Hyderabad\",     state:\"Assam\",     country:\"India\",     phone:\"9885280507\",     isDefault:true,     latitude:555.2,     longitude:87.44   }}){     newAddressId   }    }",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "338a6667-64de-8cd2-95cd-5a075be12f1d",
      "name": "edit_address",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "  eval(globals.postmanBDD);",
              "  ",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  pm.test(\"Content-Type is present\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "});",
              "",
              "",
              "",
              " it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation {   editAddress(input: {id: {{address_id}}, address: {addressType: OFFICE, firstname: \"KUNGFU\", lastname: \"panda\", address1: \"hyderabad, 21/a\", address2: \"sri krishna\", area: \"dilsukhnagar\", city: \"hyd\", country: \"india\", state: \"Assam\", phone: \"8309545056\",   isDefault:true,   latitude:454.55,longitude:487}}) {     addressId   } }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation {   editAddress(input: {id: {{address_id}}, address: {addressType: OFFICE, firstname: \"KUNGFU\", lastname: \"panda\", address1: \"hyderabad, 21/a\", address2: \"sri krishna\", area: \"dilsukhnagar\", city: \"hyd\", country: \"india\", state: \"Assam\", phone: \"8309545056\",   isDefault:true,   latitude:454.55,longitude:487}}) {     addressId   } } ",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "fc4e9eaa-bfee-fa0f-7f10-0982c4de058f",
      "name": "order_history",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Addresses', () => {",
              "  var jsonData = pm.response.json();",
              "  ",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "",
              "      ",
              " // it('it should to be an array', () => {",
              "   //   pm.expect(jsonData.data.addresses).to.be.an('array');",
              "  //});",
              "  ",
              "  if('address type should match one of the home,office and other', () => {",
              "         ",
              "     ",
              "  });",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{ordersHistory{id completed_at item_count total       currency lineItemsImages{id url}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{ordersHistory{id completed_at item_count total       currency lineItemsImages{id url}}}",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "39e20ce3-ef11-5e81-76dd-c1bed181dcd9",
      "name": "edit_password",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              " ",
              " eval(globals.postmanBDD);",
              " ",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "  if(pm.expect(jsonData).not.own.property('errors')) {",
              "    var password_before_change = pm.variables.get(\"password\");",
              "    var password_after_change = pm.variables.get(\"new_password\");",
              "    postman.setEnvironmentVariable('password', password_after_change);",
              "    postman.setEnvironmentVariable('new_password', password_before_change);",
              "  }",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=mutation{editPassword(input:{current_password: {{password}},new_password: {{new_password}}}) {user{email first_name last_name phone}}}",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "mutation{editPassword(input:{current_password: {{password}},new_password: {{new_password}}}) {user{email first_name last_name phone}}}",
              "equals": true
            }
          ]
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "de0a3736-4d91-c771-95a6-7b0b393f189a",
      "name": "sign_out",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "eval(globals.postmanBDD);",
              "var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {},
        "url": "{{REACT_APP_API_SERVER}}/auth/sign_out",
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "cf2bcef6-4257-728b-1a4f-913101617f89",
      "name": "storeInfo",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Load Postman BDD",
              "eval(globals.postmanBDD);",
              "",
              "",
              "describe('Get Selected Store info', () => {",
              "",
              "  it('should return a 200 response', () => {",
              "    response.should.have.status(200);",
              "  });",
              "",
              "  it('should return a JSON response', () => {",
              "    response.should.be.json;",
              "  });",
              "  ",
              "  var jsonData = pm.response.json();",
              "  it('should not have error object', () => {",
              "    pm.expect(jsonData).not.own.property('errors');",
              "  });",
              "  ",
              "//   it('should return the selected store', () => {",
              "//     pm.expect(jsonData.data.storeInfo.id).to.eql(pm.environment.get(\"storeId\"));",
              "//   });",
              "",
              "});",
              "",
              "",
              "",
              "",
              "pm.test(\"Content-Type is present\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "});",
              "",
              "",
              "  var jsonData = pm.response.json();",
              "",
              "",
              " it('it should have the minimum 1 images', () => {",
              "      pm.expect(jsonData.data.storeInfo.profile_picture).to.not.eq(null);",
              "  });",
              "",
              "",
              "",
              "it('shoulds start with amazon in the urls', () =>{",
              "     console.log(\"o\"+  (jsonData.data.storeInfo));  ",
              "     for(i=0;i<jsonData.data.storeInfo.length;i++){",
              "      pm.expect(jsonData.data.storeInfo[i]).to.be.an('array');",
              "     }",
              "  });",
              "",
              "it('shoulds start with amazonss in the urls', () =>{",
              "         console.log(\"opop\"+  (jsonData.data.storeInfo[i]));  ",
              "",
              "     ",
              "      if(jsonData.data.storeInfo !== null && jsonData.data.storeInfo.length >0){",
              "          for(i=0;i<jsonData.data.storeInfo.length;i++){",
              "         ",
              "     console.log(\"opoppppppppp\"+  (jsonData.data.storeInfo[i].profile_picture));  ",
              "            pm.expect(jsonData.data.storeInfo[i].profile_picture === \"s3.amazonaws.com\" );",
              "        ",
              "          }",
              "      }",
              "});",
              "",
              "",
              "",
              "tests[\"it should start with amazon in the url\"] = responseBody.has(\"s3.amazonaws.com\");",
              "",
              ""
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "client",
            "value": "{{client}}"
          },
          {
            "key": "access-token",
            "value": "{{access-token}}"
          },
          {
            "key": "uid",
            "value": "{{uid}}"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "query",
              "value": "query{storeInfo(id:{{storeId}})  {  id active email name  profile_picture profile_picture_file_name} }",
              "type": "text",
              "disabled": true
            }
          ]
        },
        "url": {
          "raw": "{{REACT_APP_API_SERVER}}/{{REACT_APP_GQL_PATH}}?query=query{storeInfo(id:{{storeId}})  {  id active email name  profile_picture profile_picture_file_name} }",
          "host": [
            "{{REACT_APP_API_SERVER}}"
          ],
          "path": [
            "{{REACT_APP_GQL_PATH}}"
          ],
          "query": [
            {
              "key": "query",
              "value": "query{storeInfo(id:{{storeId}})  {  id active email name  profile_picture profile_picture_file_name} }",
              "equals": true
            }
          ]
        },
        "description": null
      },
      "response": []
    }
  ]
}